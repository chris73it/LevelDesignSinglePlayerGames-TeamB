//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/_Project/Inputs/TileInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TileInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TileInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TileInputs"",
    ""maps"": [
        {
            ""name"": ""EditorPlacement"",
            ""id"": ""743802ad-4a39-4bb9-9bdd-225ffedb967e"",
            ""actions"": [
                {
                    ""name"": ""Mouse1"",
                    ""type"": ""Button"",
                    ""id"": ""e924c50c-fffd-41ab-85ef-585d02afece1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse2"",
                    ""type"": ""Button"",
                    ""id"": ""e1098eb4-0b26-4736-b1c5-56524b5ffe8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""70e051e9-a28a-44b7-8af9-9d73378c34aa"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""92c4a68c-1576-40af-9b93-1d94eaea6be9"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bb5b9929-5263-418e-beda-df9bf594c25e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7fb3763-d82a-4361-a526-f0c3c9f241ad"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // EditorPlacement
        m_EditorPlacement = asset.FindActionMap("EditorPlacement", throwIfNotFound: true);
        m_EditorPlacement_Mouse1 = m_EditorPlacement.FindAction("Mouse1", throwIfNotFound: true);
        m_EditorPlacement_Mouse2 = m_EditorPlacement.FindAction("Mouse2", throwIfNotFound: true);
        m_EditorPlacement_MousePosition = m_EditorPlacement.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // EditorPlacement
    private readonly InputActionMap m_EditorPlacement;
    private List<IEditorPlacementActions> m_EditorPlacementActionsCallbackInterfaces = new List<IEditorPlacementActions>();
    private readonly InputAction m_EditorPlacement_Mouse1;
    private readonly InputAction m_EditorPlacement_Mouse2;
    private readonly InputAction m_EditorPlacement_MousePosition;
    public struct EditorPlacementActions
    {
        private @TileInputs m_Wrapper;
        public EditorPlacementActions(@TileInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouse1 => m_Wrapper.m_EditorPlacement_Mouse1;
        public InputAction @Mouse2 => m_Wrapper.m_EditorPlacement_Mouse2;
        public InputAction @MousePosition => m_Wrapper.m_EditorPlacement_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_EditorPlacement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EditorPlacementActions set) { return set.Get(); }
        public void AddCallbacks(IEditorPlacementActions instance)
        {
            if (instance == null || m_Wrapper.m_EditorPlacementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EditorPlacementActionsCallbackInterfaces.Add(instance);
            @Mouse1.started += instance.OnMouse1;
            @Mouse1.performed += instance.OnMouse1;
            @Mouse1.canceled += instance.OnMouse1;
            @Mouse2.started += instance.OnMouse2;
            @Mouse2.performed += instance.OnMouse2;
            @Mouse2.canceled += instance.OnMouse2;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
        }

        private void UnregisterCallbacks(IEditorPlacementActions instance)
        {
            @Mouse1.started -= instance.OnMouse1;
            @Mouse1.performed -= instance.OnMouse1;
            @Mouse1.canceled -= instance.OnMouse1;
            @Mouse2.started -= instance.OnMouse2;
            @Mouse2.performed -= instance.OnMouse2;
            @Mouse2.canceled -= instance.OnMouse2;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
        }

        public void RemoveCallbacks(IEditorPlacementActions instance)
        {
            if (m_Wrapper.m_EditorPlacementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEditorPlacementActions instance)
        {
            foreach (var item in m_Wrapper.m_EditorPlacementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EditorPlacementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EditorPlacementActions @EditorPlacement => new EditorPlacementActions(this);
    public interface IEditorPlacementActions
    {
        void OnMouse1(InputAction.CallbackContext context);
        void OnMouse2(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
